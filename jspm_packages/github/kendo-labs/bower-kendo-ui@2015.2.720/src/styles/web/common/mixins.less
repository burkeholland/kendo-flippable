.transition(@transition) {
    -webkit-transition: ~"@{transition}";
    -moz-transition: ~"@{transition}";
    -o-transition: ~"@{transition}";
    transition: ~"@{transition}";
}

.flexbox() {
    display: ~"-moz-box";
    display: ~"-webkit-box";
    display: ~"-webkit-flex";
    display: ~"-ms-flexbox";
    display: flex;
}

.flexbox(@type) {
    display: ~"-moz-@{type}-box";
    display: ~"-webkit-@{type}-box";
    display: ~"-webkit-@{type}-flex";
    display: ~"-ms-@{type}-flexbox";
    display: ~"@{type}-flex";
}

.animation(...) {
    animation: @arguments;
    -moz-animation: @arguments;
    -webkit-animation: @arguments;
}

.animation-delay(...) {
    animation-delay: @arguments;
    -moz-animation-delay: @arguments;
    -webkit-animation-delay: @arguments;
}

.flex-direction(@direction) {
    -webkit-flex-direction: @direction;
    -ms-flex-direction: @direction;
    flex-direction: @direction;
}

.flex-wrap(@wrap) {
    -webkit-flex-wrap: @wrap;
    -ms-flex-wrap: @wrap;
    flex-wrap: @wrap;
}

.flex(@amount) {
    -moz-box-flex: @amount;
    -webkit-box-flex: @amount;
    -webkit-flex: @amount;
    -ms-flex: @amount;
    flex: @amount;
}

.flex-align(@alignment) {
    -moz-box-align: @alignment;
    -webkit-box-align: @alignment;
    -ms-flex-align: @alignment;
    flex-align: @alignment;
}

.flex-align-items(@alignment) {
    -webkit-align-items: @alignment;
    align-items: @alignment;
}

.flex-align-content(@alignment) {
    -webkit-align-content: @alignment;
    align-content: @alignment;
}

.flex-pack(@pack) {
    -moz-box-pack: @pack;
    -webkit-box-pack: @pack;
    -webkit-flex-pack: @pack;
    -ms-flex-pack: @pack;
    flex-pack: @pack;
}

.text-size-adjust(...) {
    -webkit-text-size-adjust: @arguments;
    -moz-text-size-adjust: @arguments;
    text-size-adjust: @arguments;
}

.prohibit-selection() {
    -khtml-user-select: none;
    -webkit-user-select: none;
    -moz-user-select: -moz-none;
    -ms-user-select: none;
    user-select: none;
}

.disable-high-contrast() {
    -ms-high-contrast-adjust: none;
}

.box-sizing(@sizing) {
    -webkit-box-sizing: @sizing;
    -moz-box-sizing: @sizing;
    box-sizing: @sizing;
}

.transform(...) {
    -webkit-transform: @arguments;
    -moz-transform: @arguments;
    -ms-transform: @arguments;
    -o-transform: @arguments;
    transform: @arguments;
}

.transform-origin(...) {
    -webkit-transform-origin: @arguments;
    -moz-transform-origin: @arguments;
    -ms-transform-origin: @arguments;
    -o-transform-origin: @arguments;
    transform-origin: @arguments;
}

.transform-style(...) {
    -webkit-transform-origin: @arguments;
    -moz-transform-origin: @arguments;
    transform-style: @arguments;
}

.transition(...) {
    -webkit-transition: @arguments;
    -moz-transition: @arguments;
    -ms-transition: @arguments;
    -o-transition: @arguments;
    transition: @arguments;
}

.box-orient(@direction) {
    -moz-box-orient: @direction;
    -webkit-box-orient: @direction;
    -ms-box-orient: @direction;
    box-orient: @direction;
}

.box(@type) {
    display: ~"-moz-@{type}";
    display: ~"-webkit-@{type}";
    display: ~"-ms-@{type}";
    display: @type;
}

.box-direction(@direction) {
    -moz-box-direction: @direction;
    -webkit-box-direction: @direction;
    -ms-box-direction: @direction;
    box-direction: @direction;
}

.box-flex(@amount) {
    -moz-box-flex: @amount;
    -webkit-box-flex: @amount;
    -ms-box-flex: @amount;
    box-flex: @amount;
}

.box-align(@alignment) {
    -moz-box-align: @alignment;
    -webkit-box-align: @alignment;
    -ms-box-align: @alignment;
    box-align: @alignment;
}

.box-pack(@pack) {
    -moz-box-pack: @pack;
    -webkit-box-pack: @pack;
    -ms-box-pack: @pack;
    box-pack: @pack;
}

.guarded-border-radius(@value) when (@value < 0) {
    border-radius: 0;
}

.guarded-border-radius(@value) when (@value >= 0) {
    border-radius: @value;
}

.box-shadow(...) {
    -webkit-box-shadow: @arguments;
    box-shadow: @arguments;
}

.window-shadow(@shadow-color) when not (@shadow-color = transparent) {
    border-color: @shadow-color;
    .box-shadow(@window-shadow-style lighten(@shadow-color, 50%));

    &.k-state-focused {
        border-color: @shadow-color;
        .box-shadow(@window-shadow-style @shadow-color);
    }
}

.window-shadow(@shadow-color) when (@shadow-color = transparent) and (lightness(@widget-background-color) < 50%) {
    border-color: @widget-border-color;

    &.k-state-focused {
        border-color: lighten(@widget-border-color, 20%);
    }
}

.window-shadow(@shadow-color) when (@shadow-color = transparent) and (lightness(@widget-background-color) >= 50%) {
    border-color: @widget-border-color;

    &.k-state-focused {
        border-color: darken(@widget-border-color, 10%);
    }
}

.background-clip(@type) {
    -moz-background-clip: @type;
    -webkit-background-clip: @type;
    background-clip: @type;
}

.composite-background(@gradient) when (@gradient = none) {
    background-image: @texture;
}

.composite-background(@gradient) when not (@gradient = none) {
    background-image: @fallback-texture;
    background-image: @texture, -webkit-linear-gradient(top, ~"@{gradient}");
    background-image: @texture,    -moz-linear-gradient(top, ~"@{gradient}");
    background-image: @texture,      -o-linear-gradient(top, ~"@{gradient}");
    background-image: @texture,       ~"linear-gradient(to bottom, @{gradient})";
}

.selection(@color) {
    ::selection {
        background-color: @color;
        text-shadow: none;
        color: #fff;
    }

    ::-moz-selection {
        background-color: @color;
        text-shadow: none;
        color: #fff;
    }
}
